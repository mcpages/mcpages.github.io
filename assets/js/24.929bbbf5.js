(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{293:function(e,t,a){"use strict";a.r(t);var v=a(13),r=Object(v.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"ipp后端开发说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ipp后端开发说明"}},[e._v("#")]),e._v(" ipp后端开发说明")]),e._v(" "),t("h2",{attrs:{id:"准备工作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#准备工作"}},[e._v("#")]),e._v(" 准备工作")]),e._v(" "),t("p",[e._v("1、项目地址")]),e._v(" "),t("p",[e._v("后端项目地址"),t("a",{attrs:{href:"https://codeup.aliyun.com/shwxdyjs/biz/scc/ipp.git",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://codeup.aliyun.com/shwxdyjs/biz/scc/ipp.git"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("前端项目地址 "),t("a",{attrs:{href:"https://codeup.aliyun.com/shwxdyjs/biz/scc/scc-ui.git",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://codeup.aliyun.com/shwxdyjs/biz/scc/scc-ui.git"),t("OutboundLink")],1),e._v(";")]),e._v(" "),t("p",[e._v("2、需要申请个人阿里云账号，然后访问")]),e._v(" "),t("p",[e._v("（"),t("a",{attrs:{href:"https://account-devops.aliyun.com/account/invite?sign=bd4958440da218690896ef00768d5d0d",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://account-devops.aliyun.com/account/invite?sign=bd4958440da218690896ef00768d5d0d"),t("OutboundLink")],1),e._v("）申请项目拉取权限 ;")]),e._v(" "),t("p",[e._v("3、需要安装git (代码同步),idea和vscode或其他项目开发工具,jdk1.8 版本.")]),e._v(" "),t("p",[e._v("4、环境配置")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("  (a)配置maven 配置附件中提供的maven setting.xml\n  (b)配置虚拟局域网 \n  (c)项目配置  通过git拉取代码之后,打开项目路径下的resources/bootstrap.yml文件.\n    a.将其中的spring.application.name 改成已经配置好的服务名称,如biz-ipp-bfl;\n    b.将cloud.nacos.discovery.ip 改成自己ZeroTier中Managed Addresses中的值,如10.241.9.38\n      修改好以上配置后.既可启动项目正常访问\n")])])]),t("h2",{attrs:{id:"项目说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#项目说明"}},[e._v("#")]),e._v(" 项目说明")]),e._v(" "),t("p",[e._v("1、"),t("a",{attrs:{href:"http://10.241.5.216:32675/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://10.241.5.216:32675/"),t("OutboundLink")],1),e._v(" 测试环境访问地址 账号/密码 (需方系统管理员xtgly805 业务主管ywzg805 采购员cgy805  密码1qaz!QAZ)")]),e._v(" "),t("p",[e._v("2、后端项目中需要获取当前用户的方法")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('(a)继承com.lightjet.macross.base.assist.controller.BasePrincipalController\n\n(b)具体的方法中 @ModelAttribute("CurrentUser") AuthUser user 作为参数,既可获取到当前登录用户的AuthUser对象信息,然后根据方法Userinfo u = userService.getUser(user)\n    可以获取到ipp对应的表中user的具体信息.然后根据不同的业务取不同的字段值.\n')])])]),t("p",[e._v("3、代码规范")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('(a)实体类中 @column(name="XXX")的，XXX和保持数据库一致；bean中的java字段名字统一驼峰命名,如fromType;\n\n(b)代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束;\n\n(c)代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式;\n\n(d)方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格,遵从驼峰形式.类名使用 UpperCamelCase 风格，但以下情形例外: DO/BO/DTO/VO/AO/PO/UID 等,如UserDTO;\n\n(e)常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚,如SCC_IPP;\n\n(f)各层命名规范:\n')])])]),t("p",[e._v("A) Service/DAO 层方法命名规约")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("获取对象的方法用findBy做前缀;")])]),e._v(" "),t("li",[t("p",[e._v("获取统计值的方法用 count 做前缀;")])]),e._v(" "),t("li",[t("p",[e._v("插入的方法用saveBy做前缀;")])]),e._v(" "),t("li",[t("p",[e._v("删除的方法用deleteBy做前缀;")])]),e._v(" "),t("li",[t("p",[e._v("修改的方法用updateBy做前缀。")])])]),e._v(" "),t("p",[e._v("(g)类成员与方法访问控制从严:")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private;")])]),e._v(" "),t("li",[t("p",[e._v("工具类不允许有 public 或 default 构造方法;")])]),e._v(" "),t("li",[t("p",[e._v("类非 static 成员变量并且与子类共享，必须是 protected;")])]),e._v(" "),t("li",[t("p",[e._v("类非 static 成员变量并且仅在本类使用，必须是 private;")])]),e._v(" "),t("li",[t("p",[e._v("类 static 成员变量如果仅在本类使用，必须是 private;")])]),e._v(" "),t("li",[t("p",[e._v("若是 static 成员变量，考虑是否为 final;")])]),e._v(" "),t("li",[t("p",[e._v("类成员方法只供类内部调用，必须是 private;")])]),e._v(" "),t("li",[t("p",[e._v("类成员方法只对继承类公开，那么限制为 protected。")])])]),e._v(" "),t("p",[e._v("说明: 任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。")]),e._v(" "),t("p",[e._v("(h)注释规范")]),e._v(" "),t("p",[e._v("1)所有的抽象方法(包括接口中的方法)必须要用 Javadoc 注释(/"),t("strong",[e._v("内容")]),e._v("/)、除了返回值、参数、 异常说明外，还必须指出该方法做什么事情，实现什么功能;")]),e._v(" "),t("p",[e._v("2)所有的枚举类型字段必须要有注释，说明每个数据项的用途;")]),e._v(" "),t("p",[e._v("3)所有的类都必须添加创建者和创建日期。")]),e._v(" "),t("p",[e._v("(i)事务规范")]),e._v(" "),t("p",[e._v("1)数据变更类操作务必增加事务控制;")]),e._v(" "),t("p",[e._v("2)事务注解增加 rollbackFor = Exception.class ，避免抛出受检异常，事务不回滚;")]),e._v(" "),t("p",[e._v("3)避免大事务（如避免事务中处理过多数据、执行不必要的查询、执行耗时的操作），原则是能不放在事务中处理的操作就不放在事务中。")]),e._v(" "),t("p",[e._v("(g)推荐\n代码方法设计不能超过80行,代码类设计不能超过800行，超过需要另行考虑是否满足设计模式中的单一职责，特殊情况需进行代码评审。")]),e._v(" "),t("p",[e._v("从代码可维护性方面来说，良好的语义化代码有利于后期的迭代，方法太长很难读懂，逻辑比较乱，尤其是工作交接后，交接人短暂时间内不是特别熟悉的情况下，")]),e._v(" "),t("p",[e._v("维护期间非常容易产生BUG，导致换个人之后基本是重写一遍，开发成本变高。")]),e._v(" "),t("p",[e._v("后续项目进行服务拆分，尽可能的减少新开发功能对已有功能的影响范围，需要将现有服务提供的功能进行细化，拆分出新的独立的服务，前提是已有的代码尽可能的简单，便于功能拆解，\n之后按照功能维度进行组合，将相关一组的功能涉及到的类进行整理，完成服务拆分。")]),e._v(" "),t("h2",{attrs:{id:"逻辑复用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逻辑复用"}},[e._v("#")]),e._v(" 逻辑复用")]),e._v(" "),t("p",[e._v("1、工具类和频繁使用的代码,可提取至工具类中.")])])}),[],!1,null,null,null);t.default=r.exports}}]);