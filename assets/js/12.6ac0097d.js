(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{283:function(t,n,e){"use strict";e.r(n);var a=e(13),s=Object(a.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"开发归纳总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#开发归纳总结"}},[t._v("#")]),t._v(" 开发归纳总结")]),t._v(" "),n("h2",{attrs:{id:"_1、vue2-vue3-的data变化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、vue2-vue3-的data变化"}},[t._v("#")]),t._v(" 1、vue2=>vue3 的data变化")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("<script setup>\n  import { reactive, ref, toRefs } from 'vue'\n\n  // ref声明响应式数据，用于声明基本数据类型\n  const name = ref('minchao')\n  // 修改\n  name.value = 'minchangfeng'\n\n  // reactive声明响应式数据，用于声明引用数据类型\n  const state = reactive({\n    name: 'minchao',\n    sex: '男'\n  })\n  // 修改\n  state.name = 'minchangfeng'\n  \n  // 使用toRefs解构\n  const {name, sex} = toRefs(state)\n  或者 ...toRefs(state)\n  // template可直接使用"+t._s(t.name)+"、"+t._s(t.sex)+"\n<\/script>\n")])])]),n("h2",{attrs:{id:"_2、methods"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、methods"}},[t._v("#")]),t._v(" 2、Methods")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("<template>\n  // 调用方法\n  <button @click='changeName'>按钮</button>  \n</template>\n\n<script setup>\n  import { reactive } from 'vue'\n\n  const state = reactive({\n    name: 'min'\n  })\n\n  // 声明method方法\n  const changeName = () => {\n    state.name = 'chao'\n  }  \n<\/script>\n")])])]),n("h2",{attrs:{id:"_3、computed"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、computed"}},[t._v("#")]),t._v(" 3、computed")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("<script setup>\n  import { computed, ref } from 'vue'\n\n  const count = ref(1)\n\n  // 通过computed获得doubleCount\n  const doubleCount = computed(() => {\n    return count.value * 2\n  })\n  // 获取\n  console.log(doubleCount.value)\n<\/script>\n")])])]),n("h2",{attrs:{id:"_4、watch"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4、watch"}},[t._v("#")]),t._v(" 4、watch")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("<script setup>\n  import { watch, reactive } from 'vue'\n\n  const state = reactive({\n    count: 1\n  })\n\n  // 声明方法\n  const changeCount = () => {\n    state.count = state.count * 2\n  }\n\n  // 监听count\n  watch(\n    () => state.count,\n    (newVal, oldVal) => {\n      console.log(state.count)\n      console.log(`watch监听变化前的数据：${oldVal}`)\n      console.log(`watch监听变化后的数据：${newVal}`)\n    },\n    {\n      immediate: true, // 立即执行\n      deep: true // 深度监听\n    }\n  )\n<\/script>\n")])])]),n("h2",{attrs:{id:"_5、props父传子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5、props父传子"}},[t._v("#")]),t._v(" 5、props父传子")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("//父组件\n<template>\n  <child name='Jerry'/>  \n</template>\n<script setup>\n  // 引入子组件\n  import child from './child.vue'\n<\/script>\n\n\n\n// 子组件\n<template>\n  <span>{ {props.name} }</span>\n  // 可省略【props.】\n  <span>{ {name} }</span>\n</template>\n\n<script setup>\n  import { defineProps } from 'vue'\n  defineProps在<script setup>中自动可用，无需导入\n  需在.eslintrc.js文件中【globals】下配置【defineProps: true】\n\n  // 声明props\n  const props = defineProps({\n    name: {\n      type: String,\n      default: ''\n    }\n  })  \n<\/script>\n")])])]),n("h2",{attrs:{id:"_6、emit子传父"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6、emit子传父"}},[t._v("#")]),t._v(" 6、emit子传父")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("  //子组件\n  <template>\n    <span>{ {props.name} }</span>\n    // 可省略【props.】\n    <span>{ {name} }</span>\n    <button @click='changeName'>更名</button>\n  </template>\n\n  <script setup>\n    // import { defineEmits, defineProps } from 'vue'\n    // defineEmits和defineProps在<script setup>中自动可用，无需导入\n    // 需在.eslintrc.js文件中【globals】下配置【defineEmits: true】、【defineProps: true】\n    \n    // 声明props\n    const props = defineProps({\n      name: {\n        type: String,\n        default: ''\n      }\n    }) \n    // 声明事件\n    const emit = defineEmits(['updateName'])\n    \n    const changeName = () => {\n      // 执行\n      emit('updateName', 'Tom')\n    }\n  <\/script>\n\n  // 父组件\n  <template>\n    <child :name='state.name' @updateName='updateName'/>  \n  </template>\n\n  <script setup>\n    import { reactive } from 'vue'\n    // 引入子组件\n    import child from './child.vue'\n\n    const state = reactive({\n      name: 'Jerry'\n    })\n    \n    // 接收子组件触发的方法\n    const updateName = (name) => {\n      state.name = name\n    }\n  <\/script>\n")])])]),n("h2",{attrs:{id:"_7、路由守卫"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7、路由守卫"}},[t._v("#")]),t._v(" 7、路由守卫")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("<script setup>\n  import { onBeforeRouteLeave, onBeforeRouteUpdate } from 'vue-router'\n  \n  // 添加一个导航守卫，在当前组件将要离开时触发。\n  onBeforeRouteLeave((to, from, next) => {\n    next()\n  })\n\n  // 添加一个导航守卫，在当前组件更新时触发。\n  // 在当前路由改变，但是该组件被复用时调用。\n  onBeforeRouteUpdate((to, from, next) => {\n    next()\n  })\n<\/script>\n")])])]),n("h2",{attrs:{id:"_8、全面拥抱pinia"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8、全面拥抱pinia"}},[t._v("#")]),t._v(" 8、全面拥抱Pinia")]),t._v(" "),n("p",[t._v("1、配置store.js")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("import { defineStore } from 'pinia'\n\n// defineStore 调用后返回一个函数，调用该函数获得 Store 实体\nexport const useStore = defineStore({\n  // id: 必须，在所有 Store 中唯一\n  id: 'globalState',\n  // state: 返回对象的函数\n  state: () => ({\n    count: 1,\n    data: {\n      name: 'minchao',\n      sex: '男'\n    }\n  }),\n  // getter 第一个参数是 state，是当前的状态，也可以使用 this 获取状态\n  // getter 中也可以访问其他的 getter，或者是其他的 Store\n  getters: {\n    // 通过 state 获取状态\n    doubleCount: (state) => state.count * 2,\n    // 通过 this 获取状态（注意this指向）\n    tripleCount() {\n      return this.count * 3\n    }\n  },\n  actions: {\n    updateData (newData, count) {\n      // 使用 this 直接修改\n      this.data = { ...newData }\n      this.count = count\n      \n      // 使用 $patch 修改多个值\n      this.$patch({\n        data: { ...newData },\n        count\n      })\n    }\n  }\n})\n")])])]),n("p",[t._v("2、 使用 store")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("<template>\n// 获取 store 的 state\n<p>姓名：{ {store.data.name} }</p>\n<p>性别：{ {store.data.sex} }</p>\n\n// 调用 mutations 方法 / 修改 store\n<button @click='update'>修改用户信息</button>\n\n  // 获取 getter\n  <p>获取getter：{ {store.doubleCount} }</p>\n</template>\n\n<script setup>\n  import { useStore } from '@store/store.js'\n  const store = useStore()\n\n  function update () {\n    // 通过 mutations 定义的方法修改 state\n    store.updateData({ name: 'Tom', sex: '女' })\n\n    // 通过 store 直接修改\n    store.data = { name: 'Tom', sex: '女' }\n\n    // 同时改变多个状态\n    store.$patch((state) => {\n      state.data = { name: 'Tom', sex: '女' }\n      state.count = 2\n    })\n  }\n<\/script>\n\n<style lang=\"scss\" scoped>\n</style>\n")])])]),n("h2",{attrs:{id:"_9、使用单独的script模块来定义组件名"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9、使用单独的script模块来定义组件名"}},[t._v("#")]),t._v(" 9、使用单独的"),n("code",[t._v("script")]),t._v("模块来定义组件名")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("<script>\n  export default {\n    name: 'ComponentName',\n  }\n<\/script>\n")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);